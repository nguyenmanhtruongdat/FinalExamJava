/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import ViewTable.loadDAO;
import entity.Attributes;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import ViewTable.Search;
import java.awt.Toolkit;

/**
 *
 * @author Truong Dat
 */
public class Personnel_Manager extends javax.swing.JFrame {

    /**
     * Creates new form PersonnelManage
     *
     */
    SimpleDateFormat df = new SimpleDateFormat("YYYY-MM-dd");

    public Personnel_Manager() {
        initComponents();
        setLocationRelativeTo(null);
        loadDAO load = new loadDAO();
        List<Attributes> listPersonnel = load.getAllAttributes();
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) Personnel_infor_table.getModel();
        setIconImage();
        for (Attributes o : listPersonnel) {
            model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
        }
    }

    private void setIconImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("manager_icon.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        tfID = new javax.swing.JTextField();
        lbID = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lbCity = new javax.swing.JLabel();
        lbGender = new javax.swing.JLabel();
        lbName = new javax.swing.JLabel();
        lbDob = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        dobChooser = new com.toedter.calendar.JDateChooser();
        lbDepartment = new javax.swing.JLabel();
        lbPostion = new javax.swing.JLabel();
        comboxPosition = new javax.swing.JComboBox<>();
        comboxCountry = new javax.swing.JComboBox<>();
        comboxDepart = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        rdbtnMale = new javax.swing.JRadioButton();
        rdbtnFemale = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Personnel_infor_table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboxOption = new javax.swing.JComboBox<>();
        tfSearch = new javax.swing.JTextField();
        comboxPosition1 = new javax.swing.JComboBox<>();
        comboxGender1 = new javax.swing.JComboBox<>();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        comboxDepart1 = new javax.swing.JComboBox<>();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        comboxCountry1 = new javax.swing.JComboBox<>();
        jDayChooser1 = new com.toedter.components.JSpinField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PERSONNEL MANAGEMENT");
        setBackground(new java.awt.Color(255, 255, 255));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 0), 3));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tfID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(tfID, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 170, -1));

        lbID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbID.setText("ID");
        jPanel1.add(lbID, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 70, -1));

        tfName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(tfName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 170, -1));

        lbCity.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbCity.setText("Country");
        jPanel1.add(lbCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 70, 20));

        lbGender.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbGender.setText("Gender");
        jPanel1.add(lbGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 60, 20));

        lbName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbName.setText("Name");
        jPanel1.add(lbName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 80, 20));

        lbDob.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbDob.setText("Date of birth");
        jPanel1.add(lbDob, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 120, 20));

        title.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 24)); // NOI18N
        title.setText("PERSONNEL INFORMATION");
        jPanel1.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 300, 50));

        btnInsert.setBackground(new java.awt.Color(0, 255, 102));
        btnInsert.setText("INSERT");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        jPanel1.add(btnInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 100, 30));

        btnUpdate.setBackground(new java.awt.Color(0, 255, 204));
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 380, 100, 30));

        btnRemove.setBackground(new java.awt.Color(255, 153, 0));
        btnRemove.setText("REMOVE");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 380, 100, 30));

        btnReset.setBackground(new java.awt.Color(255, 255, 0));
        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        jPanel1.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, 100, 30));

        dobChooser.setBackground(new java.awt.Color(255, 255, 255));
        dobChooser.setDateFormatString("YYYY-MM-dd");
        jPanel1.add(dobChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 170, -1));

        lbDepartment.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbDepartment.setText("Department");
        jPanel1.add(lbDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        lbPostion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbPostion.setText("Position");
        jPanel1.add(lbPostion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, -1));

        comboxPosition.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboxPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select position-", "CEO", "Manager", "Admin", "Secretary", "Developer", "Marketer" }));
        jPanel1.add(comboxPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 170, -1));

        comboxCountry.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboxCountry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select country-", "An Giang", "Ba Ria - Vung Tau", "Bac Giang", "Bac Kan", "Bac Lieu", "Bac Ninh", "Ben Tre", "Binh Dinh", "Binh Duong", "Binh Phuoc", "Binh Thuan", "Ca Mau", "Cao Bang", "Dak Lak", "Dak Nong", "Dien Bien", "Dong Nai", "Dong Thap", "Gia Lai", "Ha Giang", "Ha Nam", "Ha Tinh", "Hai Duong", "Hau Giang", "Hoa Binh", "Hung Yen", "Khanh Hoa", "Kien Giang", "Kon Tum", "Lai Chau", "Lam Dong", "Lang Son", "Lao Cai", "Long An", "Nam Dinh", "Nghe An", "Ninh Binh", "Ninh Thuan", "Phu Tho", "Quang Binh", "Quang Nam", "Quang Ngai", "Quang Ninh", "Quang Tri", "Soc Trang", "Son La", "Tay Ninh", "Thai Binh", "Thai Nguyen", "Thanh Hoa", "Thua Thien Hue", "Tien Giang", "Tra Vinh", "Tuyen Quang", "Vinh Long", "Vinh Phuc", "Yen Bai", "Phu Yen", "Can Tho", "Da Nang", "Hai Phong", "Ha Noi", "TP HCM" }));
        jPanel1.add(comboxCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 170, -1));

        comboxDepart.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboxDepart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select department-", "Accounting", "Marketing", "Management", "Director", "Administrative", "Business" }));
        jPanel1.add(comboxDepart, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 170, -1));

        btnSearch.setBackground(new java.awt.Color(255, 0, 204));
        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 100, 30));

        buttonGroup1.add(rdbtnMale);
        rdbtnMale.setText("Male");
        rdbtnMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnMaleActionPerformed(evt);
            }
        });
        jPanel1.add(rdbtnMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, -1, -1));

        buttonGroup1.add(rdbtnFemale);
        rdbtnFemale.setText("Female");
        rdbtnFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnFemaleActionPerformed(evt);
            }
        });
        jPanel1.add(rdbtnFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, 550));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0), 5));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Personnel_infor_table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Personnel_infor_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Gender", "Birthday", "City", "Position", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Personnel_infor_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Personnel_infor_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Personnel_infor_table);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 760, 470));

        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 30, 100, 30));

        jLabel1.setBackground(new java.awt.Color(51, 255, 204));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/pointing_icon.png"))); // NOI18N
        jLabel1.setText("Choose something");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 160, 30));

        comboxOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Gender", "Country", "Position", "Department", "Day(Birthday)", "Month(Birthday)", "Year(Birthday)" }));
        comboxOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxOptionActionPerformed(evt);
            }
        });
        jPanel3.add(comboxOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 120, 30));
        jPanel3.add(tfSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));

        comboxPosition1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CEO", "Manager", "Admin", "Secretary", "Employee" }));
        comboxPosition1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxPosition1ActionPerformed(evt);
            }
        });
        jPanel3.add(comboxPosition1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));

        comboxGender1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));
        jPanel3.add(comboxGender1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));
        jPanel3.add(jYearChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));

        comboxDepart1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accounting", "Marketing", "Management", "Director", "Administrative", "Business" }));
        jPanel3.add(comboxDepart1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));
        jPanel3.add(jMonthChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));

        comboxCountry1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "An Giang", "Ba Ria - Vung Tau", "Bac Giang", "Bac Kan", "Bac Lieu", "Bac Ninh", "Ben Tre", "Binh Dinh", "Binh Duong", "Binh Phuoc", "Binh Thuan", "Ca Mau", "Cao Bang", "Dak Lak", "Dak Nong", "Dien Bien", "Dong Nai", "Dong Thap", "Gia Lai", "Ha Giang", "Ha Nam", "Ha Tinh", "Hai Duong", "Hau Giang", "Hoa Binh", "Hung Yen", "Khanh Hoa", "Kien Giang", "Kon Tum", "Lai Chau", "Lam Dong", "Lang Son", "Lao Cai", "Long An", "Nam Dinh", "Nghe An", "Ninh Binh", "Ninh Thuan", "Phu Tho", "Quang Binh", "Quang Nam", "Quang Ngai", "Quang Ninh", "Quang Tri", "Soc Trang", "Son La", "Tay Ninh", "Thai Binh", "Thai Nguyen", "Thanh Hoa", "Thua Thien Hue", "Tien Giang", "Tra Vinh", "Tuyen Quang", "Vinh Long", "Vinh Phuc", "Yen Bai", "Phu Yen", "Can Tho", "Da Nang", "Hai Phong", "Ha Noi", "TP HCM" }));
        jPanel3.add(comboxCountry1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));

        jDayChooser1.setMaximum(31);
        jDayChooser1.setMinimum(1);
        jDayChooser1.setValue(1);
        jPanel3.add(jDayChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 120, 30));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 780, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        StringBuilder sb = new StringBuilder();
//        java.sql.Date dob = java.sql.Date.valueOf(dobChooser.getDate());
        String id = tfID.getText();
        String name = tfName.getText();
        String gender;
        if (rdbtnMale.isSelected()) {
            gender = "Male";
        } else {
            gender = "Female";
        }

        String dob = df.format(dobChooser.getDate());
        String country = comboxCountry.getSelectedItem().toString();
        String position = comboxPosition.getSelectedItem().toString();
        String department = comboxDepart.getSelectedItem().toString();

        if (id.equals("")) {
            sb.append("ID must not be null\n");
        }
        if (name.equals("")) {
            sb.append("Name must not be null\n");
        }
        if (!rdbtnMale.isSelected() && !rdbtnFemale.isSelected()) {
            sb.append("Gender must not be null\n");
        }
        if (country.equals("-Select country-")) {
            sb.append("Country must not be null\n");
        }
        if (position.equals("-Select position-")) {
            sb.append("Position must not be null\n");
        }
        if (department.equals("-Select department-")) {
            sb.append("Department must not be null\n");
        }
        if (dob.equals("")) {
            sb.append("Date must not be null/n");
        }
        if (sb.length() > 0) {
            JOptionPane.showMessageDialog(this, sb.toString(), "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                loadDAO load = new loadDAO();
                load.InsertPersonnelInformation(id, name, gender, dob, country, position, department);
                List<Attributes> listPersonnel = load.getAllAttributes();
                DefaultTableModel model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : listPersonnel) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e);
            }
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String id = tfID.getText();
        String name = tfName.getText();
        String gender;
        if (rdbtnMale.isSelected()) {
            gender = "Male";
        } else {
            gender = "Female";
        }
        String dob = df.format(dobChooser.getDate());
        String country = comboxCountry.getSelectedItem().toString();
        String position = comboxPosition.getSelectedItem().toString();
        String department = comboxDepart.getSelectedItem().toString();
        int i = 0;
        int updateIndex = Personnel_infor_table.getSelectedRow();
        if (updateIndex == -1) {
            tfID.setText("");
            tfName.setText("");
            JOptionPane.showMessageDialog(this, "You must select row to UPDATE", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            try {
                loadDAO load = new loadDAO();
                load.UpdatePersonnelInformation(name, gender, dob, country, position, department, id);
                JOptionPane.showMessageDialog(this, "Update successfully!");
                List<Attributes> listPersonnel = load.getAllAttributes();
                DefaultTableModel model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : listPersonnel) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e);
            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int removeIndex = Personnel_infor_table.getSelectedRow();
        if (removeIndex == -1) {
            JOptionPane.showMessageDialog(this, "You must select row to REMOVE", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            String id = tfID.getText();
            loadDAO load = new loadDAO();

            int respond = JOptionPane.showConfirmDialog(this, "Do you want to remove?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (respond == JOptionPane.YES_OPTION) {
                load.RemovetPersonnelInformation(id);
                List<Attributes> listPersonnel = load.getAllAttributes();
                DefaultTableModel model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : listPersonnel) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        tfID.setText(null);
        tfName.setText(null);
        comboxCountry.setSelectedIndex(0);
        dobChooser.setDate(null);
        comboxPosition.setSelectedIndex(0);
        comboxDepart.setSelectedIndex(0);
        rdbtnMale.setSelected(false);
        rdbtnFemale.setSelected(false);
    }//GEN-LAST:event_btnResetActionPerformed

    private void rdbtnFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnFemaleActionPerformed

    }//GEN-LAST:event_rdbtnFemaleActionPerformed

    private void rdbtnMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnMaleActionPerformed

    }//GEN-LAST:event_rdbtnMaleActionPerformed

    private void Personnel_infor_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Personnel_infor_tableMouseClicked
        int row = Personnel_infor_table.getSelectedRow();
        TableModel model = Personnel_infor_table.getModel();
        String ID = model.getValueAt(row, 0).toString().trim();
        String name = model.getValueAt(row, 1).toString().trim();
        String gender = model.getValueAt(row, 2).toString().trim();
        String city = model.getValueAt(row, 4).toString().trim();
        String position = model.getValueAt(row, 5).toString().trim();
        String department = model.getValueAt(row, 6).toString().trim();
        tfID.setText(ID);
        tfName.setText(name);

        if (gender.equals("Male")) {
            rdbtnMale.setSelected(true);
        } else {
            rdbtnFemale.setSelected(true);
        }
        int i = 1;
        while (true) {
            if (comboxCountry.getItemAt(i).toString().equals(city)) {
                comboxCountry.setSelectedItem(city);
                break;
            }
            i++;
        }

        for (int j = 0; j <= 6; j++) {
            if (comboxDepart.getItemAt(j).equals(department)) {
                comboxDepart.setSelectedItem(department);
            }
        }

        /*
        -None-
        CEO
        Manager
        Admin
        Secretary
        Employee
         */
        if (position.equals("CEO")) {
            comboxPosition.setSelectedIndex(1);
        } else if (position.equals("Manager")) {
            comboxPosition.setSelectedIndex(2);
        } else if (position.equals("Admin")) {
            comboxPosition.setSelectedIndex(3);
        } else if (position.equals("Secretary")) {
            comboxPosition.setSelectedIndex(4);
        } else if (position.equals("Employee")) {
            comboxPosition.setSelectedIndex(5);
        }

        try {
            Date dob = new SimpleDateFormat("YYYY-MM-dd").parse(Personnel_infor_table.getValueAt(row, 3).toString());
            dobChooser.setDate(dob);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Personnel_infor_tableMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        new Search().setVisible(true);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void comboxOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxOptionActionPerformed

        String option = comboxOption.getSelectedItem().toString();

        if (option.equals("Name")) {
            tfSearch.setVisible(true);
            comboxGender1.setVisible(false);
            comboxPosition1.setVisible(false);
            comboxDepart1.setVisible(false);
            jDayChooser1.setVisible(false);
            jMonthChooser1.setVisible(false);
            jYearChooser1.setVisible(false);

        } else if (!option.equals("Gender")) {
            tfSearch.setVisible(false);
        }

        if (option.equals("Gender")) {
            tfSearch.setVisible(false);
            comboxGender1.setVisible(true);
            comboxPosition1.setVisible(false);
            comboxDepart1.setVisible(false);
            jDayChooser1.setVisible(false);
            jMonthChooser1.setVisible(false);
            jYearChooser1.setVisible(false);

        } else if (!option.equals("Gender")) {
            comboxGender1.setVisible(false);
        }

        if (option.equals("Position")) {
            tfSearch.setVisible(false);
            comboxPosition1.setVisible(true);
            comboxGender1.setVisible(false);
            comboxDepart1.setVisible(false);
            jDayChooser1.setVisible(false);
            jMonthChooser1.setVisible(false);
            jYearChooser1.setVisible(false);
        } else if (!option.equals("Position")) {
            comboxPosition1.setVisible(false);
        }
        if (option.equals("Department")) {
            tfSearch.setVisible(false);
            comboxDepart1.setVisible(true);
            comboxGender1.setVisible(false);
            comboxCountry1.setVisible(false);
            comboxPosition1.setVisible(false);
            jDayChooser1.setVisible(false);
            jMonthChooser1.setVisible(false);
            jYearChooser1.setVisible(false);
        } else if (!option.equals("Department")) {
            comboxDepart1.setVisible(false);
        }
        if (option.equals("Country")) {
            tfSearch.setVisible(false);
            comboxDepart1.setVisible(false);
            comboxGender1.setVisible(false);
            comboxCountry1.setVisible(true);
            comboxPosition1.setVisible(false);
            jDayChooser1.setVisible(false);
            jMonthChooser1.setVisible(false);
            jYearChooser1.setVisible(false);
        } else if (!option.equals("Country")) {
            comboxCountry1.setVisible(false);
        }
        if (option.equals("Year(Birthday)")) {
            tfSearch.setVisible(false);
            comboxCountry1.setVisible(false);
            comboxDepart1.setVisible(false);
            comboxGender1.setVisible(false);
            comboxPosition1.setVisible(false);
            jYearChooser1.setVisible(true);
            jDayChooser1.setVisible(false);
            jMonthChooser1.setVisible(false);
        } else if (!option.equals("Month(Birthday)")) {
            jYearChooser1.setVisible(false);
        }

        if (option.equals("Month(Birthday)")) {
            tfSearch.setVisible(false);
            comboxCountry1.setVisible(false);
            comboxDepart1.setVisible(false);
            comboxGender1.setVisible(false);
            comboxPosition1.setVisible(false);
            jYearChooser1.setVisible(false);
            jDayChooser1.setVisible(false);
            jMonthChooser1.setVisible(true);
        } else if (!option.equals("Month(Birthday)")) {
            jMonthChooser1.setVisible(false);
        }
        if (option.equals("Day(Birthday)")) {
            tfSearch.setVisible(false);
            comboxCountry1.setVisible(false);
            comboxDepart1.setVisible(false);
            comboxGender1.setVisible(false);
            comboxPosition1.setVisible(false);
            jMonthChooser1.setVisible(false);
            jDayChooser1.setEnabled(true);
            jDayChooser1.setVisible(true);
            jYearChooser1.setVisible(false);
        } else if (!option.equals("Day(Birthday)")) {
            jDayChooser1.setVisible(false);
        }

        /*
        Name
        Gender
        Country
        Position
        Department
        Day(Birthday)
        Month(Birthday)
        Year(Birthday)

         */
    }//GEN-LAST:event_comboxOptionActionPerformed

    private void comboxPosition1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxPosition1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboxPosition1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadDAO load = new loadDAO();
        List<Attributes> list;
        DefaultTableModel model;
        String option = comboxOption.getSelectedItem().toString();
        switch (option) {
            case "Name":
                String name = tfSearch.getText();
                if (name.trim().length() == 0) {
                    list = load.searchAll();
                    model = new DefaultTableModel();
                    model = (DefaultTableModel) Personnel_infor_table.getModel();
                    while (model.getRowCount() != 0) {
                        model.removeRow(0);
                    }
                    for (Attributes o : list) {
                        model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                    }
                } else if (name.trim().length() == 1) {
                    list = load.searchByLetter(name);
                    model = new DefaultTableModel();
                    model = (DefaultTableModel) Personnel_infor_table.getModel();
                    while (model.getRowCount() != 0) {
                        model.removeRow(0);
                    }
                    for (Attributes o : list) {
                        model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                    }
                } else {
                    list = load.searchByName(name);
                    model = new DefaultTableModel();
                    model = (DefaultTableModel) Personnel_infor_table.getModel();
                    while (model.getRowCount() != 0) {
                        model.removeRow(0);
                    }
                    for (Attributes o : list) {
                        model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                    }
                }
                break;
            case "Gender":
                String gender = comboxGender1.getSelectedItem().toString();
                list = load.searchByGender(gender);
                model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : list) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
                break;
            case "Country":
                String country = comboxCountry1.getSelectedItem().toString();
                list = load.searchByCountry(country);
                model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : list) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
                break;
//                CEO Manager
//                Admin Secretary
//                Employee
            case "Position":
                String position = comboxPosition1.getSelectedItem().toString();
                list = load.searchbyPosition(position);
                model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : list) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
                break;
            case "Year(Birthday)":
                int year = jYearChooser1.getYear();
                list = load.searchDobByYear(year);
                model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : list) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
                break;
            case "Month(Birthday)":
                int month = jMonthChooser1.getMonth() + 1;
                list = load.SearchDobByMonth(month);
                model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : list) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
                break;
            case "Day(Birthday)":
                int day = jDayChooser1.getValue();
                list = load.SearchDobByDay(day);
                model = new DefaultTableModel();
                model = (DefaultTableModel) Personnel_infor_table.getModel();
                while (model.getRowCount() != 0) {
                    model.removeRow(0);
                }
                for (Attributes o : list) {
                    model.addRow(new Object[]{o.getId(), o.getName(), o.getGender(), o.getDob(), o.getCountry(), o.getPosition(), o.getDepartment()});
                }
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Personnel_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Personnel_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Personnel_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Personnel_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Personnel_Manager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Personnel_infor_table;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> comboxCountry;
    private javax.swing.JComboBox<String> comboxCountry1;
    private javax.swing.JComboBox<String> comboxDepart;
    private javax.swing.JComboBox<String> comboxDepart1;
    private javax.swing.JComboBox<String> comboxGender1;
    private javax.swing.JComboBox<String> comboxOption;
    private javax.swing.JComboBox<String> comboxPosition;
    private javax.swing.JComboBox<String> comboxPosition1;
    private com.toedter.calendar.JDateChooser dobChooser;
    private javax.swing.JButton jButton1;
    private com.toedter.components.JSpinField jDayChooser1;
    private javax.swing.JLabel jLabel1;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JLabel lbCity;
    private javax.swing.JLabel lbDepartment;
    private javax.swing.JLabel lbDob;
    private javax.swing.JLabel lbGender;
    private javax.swing.JLabel lbID;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbPostion;
    private javax.swing.JRadioButton rdbtnFemale;
    private javax.swing.JRadioButton rdbtnMale;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
